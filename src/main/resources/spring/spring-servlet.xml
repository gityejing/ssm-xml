<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">



	<!-- 配置SpringMVC -->
	<!-- 1.开启SpringMVC注解模式 -->
	<!-- 简化配置： 
		(1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter 
		(2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持 
	-->
	<mvc:annotation-driven />

	<!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="cacheSeconds" value="0"/>
		<property name="webBindingInitializer">
			<bean class="com.soecode.lyf.web.ClinicBindingInitializer"/>
		</property>
	</bean>-->


	
	<!-- 2.静态资源默认servlet配置
		(1)加入对静态资源的处理：js,gif,png
		(2)允许使用"/"做整体映射
	 -->
	 <mvc:default-servlet-handler/>
	 
	 <!-- 3.配置jsp 显示ViewResolver -->
	 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	 	<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
	 	<property name="prefix" value="/WEB-INF/jsp/" />
	 	<property name="suffix" value=".jsp" />
	 </bean>

	<!-- 4.扫描web相关的bean -->
	<context:component-scan base-package="com.soecode.lyf" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	 
	 <!-- 直接访问页面，不需要经过controller -->
	 <mvc:view-controller path="/success" view-name="success"/>
	 <mvc:view-controller path="/" view-name="index"/>

	<!-- 配置拦截器,执行的顺序，是先正序然后在反序 -->
	<mvc:interceptors>
		<bean class="com.soecode.lyf.web.MyHandlerInterceptor"/>
		<!--<mvc:interceptor>
			<mvc:mapping path="/test/number.do"/>
			<bean class="com.soecode.lyf.web.MyHandlerInterceptor"/>
		</mvc:interceptor>-->
	</mvc:interceptors>

	<!-- 文件上传解析器 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<property name="maxUploadSize" value="10485760000"></property><!-- 最大上传文件大小 -->
		<property name="maxInMemorySize" value="10960"></property>
	</bean>

	<!-- 异常处理 -->
	<!-- 默认的实现类注入 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<!-- 为所有的异常定义默认的异常处理页面，exceptionMappings未定义的异常使用本默认配置 -->
		<property name="defaultErrorView" value="error"></property>
		<!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->
		<property name="exceptionAttribute" value="ex"></property>
		<!--
    　　　　定义需要特殊处理的异常，用类名或完全路径名作为key，异常页文件名作为值，
    　　　　将不同的异常映射到不同的页面上。
    　　 -->
		<property name="exceptionMappings">
			<props>
				<prop key="IOException">error/ioexp</prop>
				<prop key="java.sql.SQLException">error/sqlexp</prop>
			</props>
		</property>
	</bean>
	 
</beans>